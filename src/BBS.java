import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class BBS {
    //two big prime numbers
    BigInteger p;
    BigInteger q;
    //the product of p and q
    BigInteger n;
    //the seed, a random number between 0 and n-1
    BigInteger x_0;
    //a list containing the random numbers generated last
    List<BigInteger> randomNumbers;
    //an array containing the last randomly generated bytes
    int[] randomBytes;

    //generates numberOfNumbers numbers pseudo-randomly using the blum-blum-shab generating method,
    // stores them in the randomNumbers list and prints them
    public void generate_numbers(int numberOfNumbers){
        randomNumbers = new ArrayList<>();
        System.out.println("The random numbers are:\n");
        BigInteger x_i = x_0.multiply(x_0).mod(n);
        for (int i = 0; i < numberOfNumbers; i++) {
            randomNumbers.add(x_i);
            System.out.print(x_i + " ");
            BigInteger copy = x_i;
            x_i = copy.multiply(copy).mod(n);
        }
    }

    //generates numberOfNumbers bytes pseudo-randomly using the blum-blum-shab generating method to
    // generate numbers. If the number is odd the byte will be 1 and if the number is even the
    // corresponding byte will be 0. The method then stores the bytes in the randomBytes array and
    // prints them
    public void generate_bytes(int numberOfNumbers){
        randomBytes = new int[numberOfNumbers];
        Arrays.fill(randomBytes,0);
        System.out.println("The random bytes are:\n");
        BigInteger x_i = x_0.multiply(x_0).mod(n);
        for (int i = 0; i < numberOfNumbers; i++) {
            if(!x_i.mod(new BigInteger("2")).equals(BigInteger.ZERO)){
                //x_i % 2 != 0
                System.out.print("1 ");
                randomBytes[i]=1;
            }
            else{
                //x_i % 2 == 0
                System.out.print("0 ");
                randomBytes[i]=0;
            }
            BigInteger copy = x_i;
            x_i = copy.multiply(copy).mod(n);
        }
    }

    //default constructor. It generates 2 random prime numbers p and q using the probablePrime() method
    //n is computed as p*q and x_0 is a random number between 0 and n-1 (the method generates random
    //numbers until one is found such that it is different than p,q and n and that it is between 0 and n-1
    public BBS(){
        BigInteger maxLimit = new BigInteger("5000000000000");
        BigInteger minLimit = new BigInteger("25000000000");
        BigInteger bigInteger = maxLimit.subtract(minLimit);

        int len = maxLimit.bitLength();
        Random randNum = new Random();
        p = java.math.BigInteger.probablePrime(len, randNum);

        if (p.compareTo(minLimit) < 0)
            p = p.add(minLimit);
        if (p.compareTo(bigInteger) >= 0)
            p = p.mod(bigInteger).add(minLimit);

        q = java.math.BigInteger.probablePrime(len, randNum);
        if (q.compareTo(minLimit) < 0)
            q = q.add(minLimit);
        if (q.compareTo(bigInteger) >= 0)
            q = q.mod(bigInteger).add(minLimit);
        BigInteger aux = p;
        this.n = aux.multiply(q);
        do {
            bigInteger = maxLimit.subtract(minLimit);
            randNum = new Random();
            len = maxLimit.bitLength();
            BigInteger res = new BigInteger(len, randNum);
            if (res.compareTo(minLimit) < 0)
                res = res.add(minLimit);
            if (res.compareTo(bigInteger) >= 0)
                res = res.mod(bigInteger).add(minLimit);
            this.x_0 = res;
        } while (x_0 == p || x_0 == n || x_0 == q || x_0.compareTo(BigInteger.ZERO)<0 || x_0.compareTo(n)>=0);
    }

    //default constructor. It generates 2 random prime numbers p and q using the probablePrime() method
    //n is computed as p*q and x_0 is a random number between 0 and n-1 (the method generates random
    //numbers until one is found such that it is different than p,q and n and that it is between 0 and n-1
    public BBS(BigInteger p, BigInteger q) {
        this.p = p;
        this.q = q;
        BigInteger aux = p;
        this.n = aux.multiply(q);
        BigInteger maxLimit = new BigInteger("5000000000000");
        BigInteger minLimit = new BigInteger("25000000000");
        do {
            BigInteger bigInteger = maxLimit.subtract(minLimit);
            Random randNum = new Random();
            int len = maxLimit.bitLength();
            BigInteger res = new BigInteger(len, randNum);
            if (res.compareTo(minLimit) < 0)
                res = res.add(minLimit);
            if (res.compareTo(bigInteger) >= 0)
                res = res.mod(bigInteger).add(minLimit);
            this.x_0 = res;
        } while (x_0 == p || x_0 == n || x_0 == q || x_0.compareTo(BigInteger.ZERO)<0 || x_0.compareTo(n)>=0);
    }

    //simple testing. Compares the number of bytes with value 0 and the number of bytes with value 1
    void testing(){
        if(randomBytes == null) System.out.println("There have been no bytes generated so there are no tests to be done");
        else{
            int numberOf0 = 0;
            int numberOf1 = 0;
            for(int randByte : randomBytes){
                if(randByte==0) numberOf0++;
                else numberOf1 ++;
            }
            System.out.println("There are " + numberOf0 + " bytes of value 0 and " + numberOf1 + " bytes of value 1");
            if(numberOf0>numberOf1){
                System.out.println("There are " + (numberOf0-numberOf1) + " more values of 0 than 1");
            }
            else{
                if(numberOf0==numberOf1) System.out.println("There are equal numbers of 0's and 1's");
                else
                    System.out.println("There are " + (numberOf1-numberOf0) + " more values of 1 than 0");
            }
        }
    }

    @Override
    public String toString() {
        return "x0: " + this.x_0 + "\np: " + this.p + "\nq: " + this.q + "\nn: " + this.n +"\n";
    }

    public void setP(BigInteger p) {
        this.p = p;
    }

    public void setQ(BigInteger q) {
        this.q = q;
    }

    public void setN(BigInteger n) {
        this.n = n;
    }

    public void setX_0(BigInteger x_0) {
        this.x_0 = x_0;
    }

    public BigInteger getP() {
        return p;
    }

    public BigInteger getQ() {
        return q;
    }

    public BigInteger getN() {
        return n;
    }

    public BigInteger getX_0() {
        return x_0;
    }
}
